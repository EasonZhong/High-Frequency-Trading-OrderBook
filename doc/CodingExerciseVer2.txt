Background:
===========

A simplified price feed for a futures contract is a sequence of messages describing orders.
Orders can be placed to buy (sell) a given quantity at a specified price, these orders sit in the order book. 
If at any point the order book receives a buy and sell order at the same price, the two orders are matched with each other and removed from the order book.
The orders are matched to the best possible price (i.e., the lowest price sell order or the highest price buy order), in the event where orders are tied in terms of price, orders are matched in time priority (first order to arrive will be matched first). 

An example of an order book:

price,B/S,quantity of earlier order,quantity of later order,... (B = buy, S = sell)

1081,S,1 // one order to sell price = 1081 quantity = 1
1056,S,10 // one order to sell, price = 1056 quantity = 10
1031,S,2,5 //two orders to sell, price = 1031 quantity = 2, second order of price = 1031 quantity = 5

1006,B,9,1 //two orders to buy, first order price =1006 quantity = 9, second order of price = 1006 quantity = 1
981,B,30 //one order to buy, price = 981 quantity = 30

If a new buy order arrives for a quantity of 3 at a price of 1056, there will be a match. The only sell orders that are willing to sell at or below a price of 1056 are of quantities 10, 2, and 5. Since the orders of quantities 2 and 5 are at a better price, the new order will match first against those. Since the order of quantity 2 arrived first, the new order will match against the full quantity of 2 and the remaining quantity of 1 will match the order of quantity 5, this causes the sell order of quantity 5 to be reduced to a quantity of 4. 

The new state of the order book will be :

price,B/S,quantity of first order,quantity of second order,... (B = buy, S = sell)
1081,S,1 
1056,S,10 
1031,S,4

1006,B,9,1 
981,B,30 

Note that if a new sell order arrives at a price of 1031, it will be placed to the right of the sell order of quantity 4. Also, although there are only a few price levels shown here, you should bear in mind that buys and sells can arrive at any price level.

Messages:
=========
The types of messages that can arrive on the order book are as follows:
 
action,orderid,side,quantity,price (e.g., A,123,B,9,1006)
action = A (add), X (remove), M (modify)
orderid = unique 64 bit unsigned long long to identify each order
used to reference existing orders for remove/modify
side = B (buy), S (sell)
quantity = positive integer indicating maximum quantity to buy/sell
price = integer indicating max price at which to buy/min price to sell

Example:
========

The following set of messages builds the initial book from the example in the Background section above. Note that orderid 100604 is cancelled, so it doesn't appear in the book above.

A,100600,S,1,1081
A,100601,B,9,1006
A,100602,B,30,981
A,100603,S,10,1056
A,100604,B,10,950
A,100605,S,2,1031
A,100606,B,1,1006
X,100604,B,10,950 // cancel
A,100607,S,5,1031

The following sequence of additional messages represents the new buy order removing and modifying existing sell orders.  Note that the new buy order does not appear as an add message but its impact is felt by the removal and modification of two sell orders. These messages happen in the second part of the Background example above:

X,100605,S,2,1031
M,100607,S,4,1031 // order is modified down to reflect quantity traded

The state of the book after these messages is shown at the end of the Background section.

Problem:
========

(1) Given a sequence of messages, as defined above, construct an in-memory representation of the current state of the order book. A sample input and output file has been attached in this email, (sampleInput.csv, sampleOutput.txt).

(2) After every message, write the state of order book (best sell price and best buy price) in this format:
[price,S,order qty of first sell order, order qty of second sell order, ..][price,B,order qty of first buy order, order qty of second buy order, ..]
The Background example above would yield the output below:

[1081,S,1][NAN]
[1081,S,1][1006,B,9]
[1081,S,1][1006,B,9]
[1056,S,10][1006,B,9]
[1056,S,10][1006,B,9]
[1031,S,2][1006,B,9]
[1031,S,2][1006,B,9,1]
[1031,S,2][1006,B,9,1]
[1031,S,2,5][1006,B,9,1]
[1031,S,5][1006,B,9,1]
[1031,S,4][1006,B,9,1]

(3) Your code should be correct, execute quickly, clean, easy to understand and robust. Specifically, your program should not crash if it gets:
a. corrupted messages
b. duplicated order ids (duplicate adds; these should be ignored)
c. removes with no corresponding order id
d. negative, missing, or out-of-bounds prices, quantities, order ids

You should note how often each of these cases occurs and print a summary when the program finishes processing all messages.
You should provide a written summary of the steps you have taken to optimize the program.


(4) The following is a stub C++ program to get you started. Feel free to modify it as you see fit. You may use STL.

class FeedHandler
{
public:
FeedHandler();

void processMessage(const std::string &line);
void printCurrentOrderBook(std::ostream &os) const;
};

int main(int argc, char **argv)
{
FeedHandler feed;
std::string line;
const std::string filename(argv[1]);
std::ifstream infile(filename.c_str(), ios::in);
int counter = 0;
while (std::getline(infile, line)) {
feed.processMessage(line);
feed.printCurrentOrderBook(std::cout);
}
return 0;
}


(5) Please make the program compilable in GCC and provide a make file.